--- a/dwm.c	2019-02-02 13:55:28.000000000 +0100
+++ b/dwm.c	2020-08-05 13:27:30.085450333 +0200
@@ -40,6 +40,10 @@
 #include <X11/extensions/Xinerama.h>
 #endif /* XINERAMA */
 #include <X11/Xft/Xft.h>
+#ifdef ROUNDEDCORNERS
+#include <xcb/xcb.h>
+#include <xcb/shape.h>
+#endif
 
 #include "drw.h"
 #include "util.h"
@@ -49,7 +53,12 @@
 #define CLEANMASK(mask)         (mask & ~(numlockmask|LockMask) & (ShiftMask|ControlMask|Mod1Mask|Mod2Mask|Mod3Mask|Mod4Mask|Mod5Mask))
 #define INTERSECT(x,y,w,h,m)    (MAX(0, MIN((x)+(w),(m)->wx+(m)->ww) - MAX((x),(m)->wx)) \
                                * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
+#ifdef ATTACHASIDE
+#define ISVISIBLEONTAG(C, T)    ((C->tags & T))
+#define ISVISIBLE(C)            ISVISIBLEONTAG(C, C->mon->tagset[C->mon->seltags])
+#else
 #define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
+#endif
 #define LENGTH(X)               (sizeof X / sizeof X[0])
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
@@ -57,14 +66,46 @@
 #define TAGMASK                 ((1 << LENGTH(tags)) - 1)
 #define TEXTW(X)                (drw_fontset_getwidth(drw, (X)) + lrpad)
 
+#ifdef SYSTRAY
+#define SYSTEM_TRAY_REQUEST_DOCK    0
+
+/* XEMBED messages */
+#define XEMBED_EMBEDDED_NOTIFY      0
+#define XEMBED_WINDOW_ACTIVATE      1
+#define XEMBED_FOCUS_IN             4
+#define XEMBED_MODALITY_ON         10
+
+#define XEMBED_MAPPED              (1 << 0)
+#define XEMBED_WINDOW_ACTIVATE      1
+#define XEMBED_WINDOW_DEACTIVATE    2
+
+#define VERSION_MAJOR               0
+#define VERSION_MINOR               0
+#define XEMBED_EMBEDDED_VERSION (VERSION_MAJOR << 16) | VERSION_MINOR
+#endif
+
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
+#ifdef PERSONAL
+enum { SchemeNorm, SchemeSel, SchemeWarn, SchemeUrgent, SchemeTagUnderline, SchemeBGgreen, SchemeWnameBG, SchemeBlockSeparator, SchemeCmusButton }; /* color schemes */
+#else
 enum { SchemeNorm, SchemeSel }; /* color schemes */
+#endif
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
+#ifdef SYSTRAY
+NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation, NetSystemTrayOrientationHorz,
+#endif
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
+#ifdef SYSTRAY
+enum { Manager, Xembed, XembedInfo, XLast }; /* Xembed atoms */
+#endif
 enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; /* default atoms */
+#ifdef PERSONAL
+enum { ClkTagBar, ClkCmusButton, ClkStatusText, ClkWinTitle,
+#else
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
+#endif
        ClkClientWin, ClkRootWin, ClkLast }; /* clicks */
 
 typedef union {
@@ -92,7 +133,11 @@
 	int basew, baseh, incw, inch, maxw, maxh, minw, minh;
 	int bw, oldbw;
 	unsigned int tags;
+	#ifdef CENTER
+	int isfixed, iscentered, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
+	#else
 	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
+	#endif
 	Client *next;
 	Client *snext;
 	Monitor *mon;
@@ -111,6 +156,10 @@
 	void (*arrange)(Monitor *);
 } Layout;
 
+#ifdef PERTAG
+typedef struct Pertag Pertag;
+#endif
+
 struct Monitor {
 	char ltsymbol[16];
 	float mfact;
@@ -119,6 +168,12 @@
 	int by;               /* bar geometry */
 	int mx, my, mw, mh;   /* screen size */
 	int wx, wy, ww, wh;   /* window area  */
+	#ifdef VANITYGAPS
+	int gappih;           /* horizontal gap between windows */
+	int gappiv;           /* vertical gap between windows */
+	int gappoh;           /* horizontal outer gaps */
+	int gappov;           /* vertical outer gaps */
+	#endif
 	unsigned int seltags;
 	unsigned int sellt;
 	unsigned int tagset[2];
@@ -130,6 +185,9 @@
 	Monitor *next;
 	Window barwin;
 	const Layout *lt[2];
+	#ifdef PERTAG
+	Pertag *pertag;
+	#endif
 };
 
 typedef struct {
@@ -137,16 +195,31 @@
 	const char *instance;
 	const char *title;
 	unsigned int tags;
+	#ifdef CENTER
+	int iscentered;
+	#endif
 	int isfloating;
 	int monitor;
 } Rule;
 
+#ifdef SYSTRAY
+typedef struct Systray   Systray;
+struct Systray {
+	Window win;
+	Client *icons;
+};
+#endif
+
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
 static void arrange(Monitor *m);
 static void arrangemon(Monitor *m);
 static void attach(Client *c);
+#ifdef ATTACHASIDE
+static void attachaside(Client *c);
+static Client *nexttagged(Client *c);
+#endif
 static void attachstack(Client *c);
 static void buttonpress(XEvent *e);
 static void checkotherwm(void);
@@ -194,22 +267,57 @@
 static void restack(Monitor *m);
 static void run(void);
 static void scan(void);
+#ifdef SYSTRAY
+static Atom getatomprop(Client *c, Atom prop);
+static unsigned int getsystraywidth();
+static void removesystrayicon(Client *i);
+static void resizebarwin(Monitor *m);
+static void resizerequest(XEvent *e);
+static Monitor *systraytomon(Monitor *m);
+static void updatesystray(void);
+static void updatesystrayicongeom(Client *i, int w, int h);
+static void updatesystrayiconstate(Client *i, XPropertyEvent *ev);
+static Client *wintosystrayicon(Window w);
+#endif
+#ifdef SYSTRAY
+static int sendevent(Window w, Atom proto, int m, long d0, long d1, long d2, long d3, long d4);
+#else
 static int sendevent(Client *c, Atom proto);
+#endif
 static void sendmon(Client *c, Monitor *m);
 static void setclientstate(Client *c, long state);
 static void setfocus(Client *c);
 static void setfullscreen(Client *c, int fullscreen);
+#ifdef VANITYGAPS
+static void setgaps(int oh, int ov, int ih, int iv);
+static void incrgaps(const Arg *arg);
+static void incrigaps(const Arg *arg);
+static void incrogaps(const Arg *arg);
+static void incrohgaps(const Arg *arg);
+static void incrovgaps(const Arg *arg);
+static void incrihgaps(const Arg *arg);
+static void incrivgaps(const Arg *arg);
+static void togglegaps(const Arg *arg);
+static void defaultgaps(const Arg *arg);
+#endif
 static void setlayout(const Arg *arg);
 static void setmfact(const Arg *arg);
 static void setup(void);
 static void seturgent(Client *c, int urg);
 static void showhide(Client *c);
 static void sigchld(int unused);
+#ifdef RESTARTSIG
+static void sighup(int unused);
+static void sigterm(int unused);
+#endif
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *);
 static void togglebar(const Arg *arg);
+#ifdef PERSONAL
+static void fullscreenmode(const Arg *arg);
+#endif
 static void togglefloating(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
@@ -233,14 +341,27 @@
 static int xerrordummy(Display *dpy, XErrorEvent *ee);
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
+#ifdef ROUNDEDCORNERS
+static void roundcorners(Client* c, const unsigned int fs);
+#endif
 
 /* variables */
+#ifdef SYSTRAY
+static Systray *systray =  NULL;
+#endif
 static const char broken[] = "broken";
 static char stext[256];
 static int screen;
 static int sw, sh;           /* X display screen geometry width, height */
 static int bh, blw = 0;      /* bar geometry */
+#ifdef VANITYGAPS
+static int enablegaps = 1;   /* enables gaps, used by togglegaps */
+#endif
 static int lrpad;            /* sum of left and right padding for text */
+#ifdef BARPADDING
+static int vp;               /* vertical padding for bar */
+static int sp;               /* side padding for bar */
+#endif
 static int (*xerrorxlib)(Display *, XErrorEvent *);
 static unsigned int numlockmask = 0;
 static void (*handler[LASTEvent]) (XEvent *) = {
@@ -257,9 +378,19 @@
 	[MapRequest] = maprequest,
 	[MotionNotify] = motionnotify,
 	[PropertyNotify] = propertynotify,
+	#ifdef SYSTRAY
+	[ResizeRequest] = resizerequest,
+	#endif
 	[UnmapNotify] = unmapnotify
 };
+#ifdef SYSTRAY
+static Atom wmatom[WMLast], netatom[NetLast], xatom[XLast];
+#else
 static Atom wmatom[WMLast], netatom[NetLast];
+#endif
+#ifdef RESTARTSIG
+static int restart = 0;
+#endif
 static int running = 1;
 static Cur *cursor[CurLast];
 static Clr **scheme;
@@ -271,6 +402,17 @@
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+#ifdef PERTAG
+struct Pertag {
+	unsigned int curtag, prevtag; /* current and previous tag */
+	int nmasters[LENGTH(tags) + 1]; /* number of windows in master area */
+	float mfacts[LENGTH(tags) + 1]; /* mfacts per tag */
+	unsigned int sellts[LENGTH(tags) + 1]; /* selected layouts */
+	const Layout *ltidxs[LENGTH(tags) + 1][2]; /* matrix of tags and layouts indexes  */
+	int showbars[LENGTH(tags) + 1]; /* display bar for the current tag */
+};
+#endif
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -285,6 +427,9 @@
 	XClassHint ch = { NULL, NULL };
 
 	/* rule matching */
+	#ifdef CENTER
+	c->iscentered = 0;
+	#endif
 	c->isfloating = 0;
 	c->tags = 0;
 	XGetClassHint(dpy, c->win, &ch);
@@ -297,6 +442,9 @@
 		&& (!r->class || strstr(class, r->class))
 		&& (!r->instance || strstr(instance, r->instance)))
 		{
+			#ifdef CENTER
+			c->iscentered = r->iscentered;
+			#endif
 			c->isfloating = r->isfloating;
 			c->tags |= r->tags;
 			for (m = mons; m && m->num != r->monitor; m = m->next);
@@ -394,7 +542,7 @@
 void
 arrangemon(Monitor *m)
 {
-	strncpy(m->ltsymbol, m->lt[m->sellt]->symbol, sizeof m->ltsymbol);
+	strncpy(m->ltsymbol, m->lt[m->sellt]->symbol, sizeof(m->ltsymbol) - 1);
 	if (m->lt[m->sellt]->arrange)
 		m->lt[m->sellt]->arrange(m);
 }
@@ -406,6 +554,19 @@
 	c->mon->clients = c;
 }
 
+#ifdef ATTACHASIDE
+void
+attachaside(Client *c) {
+	Client *at = nexttagged(c);
+	if(!at) {
+		attach(c);
+		return;
+		}
+	c->next = at->next;
+	at->next = c;
+}
+#endif
+
 void
 attachstack(Client *c)
 {
@@ -416,7 +577,11 @@
 void
 buttonpress(XEvent *e)
 {
+	#ifdef HIDEVACANTTAGS
+	unsigned int i, x, click, occ = 0;
+	#else
 	unsigned int i, x, click;
+	#endif
 	Arg arg = {0};
 	Client *c;
 	Monitor *m;
@@ -431,15 +596,36 @@
 	}
 	if (ev->window == selmon->barwin) {
 		i = x = 0;
+		#if ! defined(HIDEVACANTTAGS)
 		do
+		#endif
+		#if defined(HIDEVACANTTAGS)
+		for (c = m->clients; c; c = c->next)
+			occ |= c->tags == 255 ? 0 : c->tags;
+		do {
+			/* do not reserve space for vacant tags */
+			if (!(occ & 1 << i || m->tagset[m->seltags] & 1 << i))
+				continue;
+			x += TEXTW(tags[i]);	
+		} while (ev->x >= x && ++i < LENGTH(tags));
+		#else
 			x += TEXTW(tags[i]);
 		while (ev->x >= x && ++i < LENGTH(tags));
+		#endif
 		if (i < LENGTH(tags)) {
 			click = ClkTagBar;
 			arg.ui = 1 << i;
 		} else if (ev->x < x + blw)
+			#ifdef PERSONAL
+			click = ClkCmusButton;
+			#else
 			click = ClkLtSymbol;
+			#endif
+		#ifdef SYSTRAY
+		else if (ev->x > selmon->ww - TEXTW(stext) - getsystraywidth())
+		#else
 		else if (ev->x > selmon->ww - TEXTW(stext))
+		#endif
 			click = ClkStatusText;
 		else
 			click = ClkWinTitle;
@@ -482,6 +668,13 @@
 	XUngrabKey(dpy, AnyKey, AnyModifier, root);
 	while (mons)
 		cleanupmon(mons);
+	#ifdef SYSTRAY
+	if (showsystray) {
+		XUnmapWindow(dpy, systray->win);
+		XDestroyWindow(dpy, systray->win);
+		free(systray);
+	}
+	#endif
 	for (i = 0; i < CurLast; i++)
 		drw_cur_free(drw, cursor[i]);
 	for (i = 0; i < LENGTH(colors); i++)
@@ -512,9 +705,57 @@
 void
 clientmessage(XEvent *e)
 {
+	#ifdef SYSTRAY
+	XWindowAttributes wa;
+	XSetWindowAttributes swa;
+	#endif
 	XClientMessageEvent *cme = &e->xclient;
 	Client *c = wintoclient(cme->window);
 
+	#ifdef SYSTRAY
+	if (showsystray && cme->window == systray->win && cme->message_type == netatom[NetSystemTrayOP]) {
+		/* add systray icons */
+		if (cme->data.l[1] == SYSTEM_TRAY_REQUEST_DOCK) {
+			if (!(c = (Client *)calloc(1, sizeof(Client))))
+				die("fatal: could not malloc() %u bytes\n", sizeof(Client));
+			if (!(c->win = cme->data.l[2])) {
+				free(c);
+				return;
+			}
+			c->mon = selmon;
+			c->next = systray->icons;
+			systray->icons = c;
+			XGetWindowAttributes(dpy, c->win, &wa);
+			c->x = c->oldx = c->y = c->oldy = 0;
+			c->w = c->oldw = wa.width;
+			c->h = c->oldh = wa.height;
+			c->oldbw = wa.border_width;
+			c->bw = 0;
+			c->isfloating = True;
+			/* reuse tags field as mapped status */
+			c->tags = 1;
+			updatesizehints(c);
+			updatesystrayicongeom(c, wa.width, wa.height);
+			XAddToSaveSet(dpy, c->win);
+			XSelectInput(dpy, c->win, StructureNotifyMask | PropertyChangeMask | ResizeRedirectMask);
+			XReparentWindow(dpy, c->win, systray->win, 0, 0);
+			/* use parents background color */
+			swa.background_pixel  = scheme[SchemeNorm][ColBg].pixel;
+			XChangeWindowAttributes(dpy, c->win, CWBackPixel, &swa);
+			sendevent(c->win, netatom[Xembed], StructureNotifyMask, CurrentTime, XEMBED_EMBEDDED_NOTIFY, 0 , systray->win, XEMBED_EMBEDDED_VERSION);
+			/* FIXME not sure if I have to send these events, too */
+			sendevent(c->win, netatom[Xembed], StructureNotifyMask, CurrentTime, XEMBED_FOCUS_IN, 0 , systray->win, XEMBED_EMBEDDED_VERSION);
+			sendevent(c->win, netatom[Xembed], StructureNotifyMask, CurrentTime, XEMBED_WINDOW_ACTIVATE, 0 , systray->win, XEMBED_EMBEDDED_VERSION);
+			sendevent(c->win, netatom[Xembed], StructureNotifyMask, CurrentTime, XEMBED_MODALITY_ON, 0 , systray->win, XEMBED_EMBEDDED_VERSION);
+			XSync(dpy, False);
+			resizebarwin(selmon);
+			updatesystray();
+			setclientstate(c, NormalState);
+		}
+		return;
+	}
+	#endif
+
 	if (!c)
 		return;
 	if (cme->message_type == netatom[NetWMState]) {
@@ -567,7 +808,13 @@
 				for (c = m->clients; c; c = c->next)
 					if (c->isfullscreen)
 						resizeclient(c, m->mx, m->my, m->mw, m->mh);
+				#if defined(SYSTRAY) && defined(BARPADDING)
+				resizebarwin(m);
+				#elif defined(BARPADDING) && ! defined(SYSTRAY)
+				XMoveResizeWindow(dpy, m->barwin, m->wx + sp, m->by + vp, m->ww -  2 * sp, bh);
+				#else
 				XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, m->ww, bh);
+				#endif
 			}
 			focus(NULL);
 			arrange(NULL);
@@ -631,6 +878,9 @@
 createmon(void)
 {
 	Monitor *m;
+	#ifdef PERTAG
+	unsigned int i;
+	#endif
 
 	m = ecalloc(1, sizeof(Monitor));
 	m->tagset[0] = m->tagset[1] = 1;
@@ -638,9 +888,30 @@
 	m->nmaster = nmaster;
 	m->showbar = showbar;
 	m->topbar = topbar;
+	#ifdef VANITYGAPS
+	m->gappih = gappih;
+	m->gappiv = gappiv;
+	m->gappoh = gappoh;
+	m->gappov = gappov;
+	#endif
 	m->lt[0] = &layouts[0];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
 	strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
+	#ifdef PERTAG
+	m->pertag = ecalloc(1, sizeof(Pertag));
+	m->pertag->curtag = m->pertag->prevtag = 1;
+
+	for (i = 0; i <= LENGTH(tags); i++) {
+		m->pertag->nmasters[i] = m->nmaster;
+		m->pertag->mfacts[i] = m->mfact;
+
+		m->pertag->ltidxs[i][0] = m->lt[0];
+		m->pertag->ltidxs[i][1] = m->lt[1];
+		m->pertag->sellts[i] = m->sellt;
+
+		m->pertag->showbars[i] = m->showbar;
+	}
+	#endif
 	return m;
 }
 
@@ -652,6 +923,13 @@
 
 	if ((c = wintoclient(ev->window)))
 		unmanage(c, 1);
+	#ifdef SYSTRAY
+	else if ((c = wintosystrayicon(ev->window))) {
+		removesystrayicon(c);
+		resizebarwin(selmon);
+		updatesystray();
+	}
+	#endif
 }
 
 void
@@ -695,51 +973,132 @@
 void
 drawbar(Monitor *m)
 {
+	#ifdef SYSTRAY
+	int x, w, sw = 0, stw = 0;
+	#else
 	int x, w, sw = 0;
+	#endif
 	int boxs = drw->fonts->h / 9;
 	int boxw = drw->fonts->h / 6 + 2;
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
 
+	#ifdef SYSTRAY
+	if(showsystray && m == systraytomon(m))
+		stw = getsystraywidth();
+	#endif
+
 	/* draw status first so it can be overdrawn by tags later */
 	if (m == selmon) { /* status is only drawn on selected monitor */
 		drw_setscheme(drw, scheme[SchemeNorm]);
+		#if defined(PERSONAL) && defined(SYSTRAY) && defined(BARPADDING)
+		sw = drw_get_width(drw, LENGTH(colors), stext);
+		drw_colored_text(drw, scheme, LENGTH(colors), m->ww - sw - stw - 2 * sp, 0, sw, bh, 0, stext);
+		#elif defined(PERSONAL) && defined(SYSTRAY)
+		sw = drw_get_width(drw, LENGTH(colors), stext);
+		drw_colored_text(drw, scheme, LENGTH(colors), m->ww - sw - stw, 0, sw, bh, 0, stext);
+		#elif defined(PERSONAL)
+		sw = drw_get_width(drw, LENGTH(colors), stext);
+		drw_colored_text(drw, scheme, LENGTH(colors), m->ww - sw - 0, 0, sw, bh, 0, stext);
+		#elif defined(SYSTRAY)
+		sw = TEXTW(stext) - lrpad / 2 + 2; /* 2px right padding */
+		drw_text(drw, m->ww - sw - stw, 0, sw, bh, lrpad / 2 - 2, stext, 0);
+		#elif defined(BARPADDING)
+		sw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
+		drw_text(drw, m->ww - sw - 2 * sp, 0, sw, bh, 0, stext, 0);
+		#else
 		sw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
 		drw_text(drw, m->ww - sw, 0, sw, bh, 0, stext, 0);
+		#endif
 	}
-
+	
+	#ifdef SYSTRAY
+	resizebarwin(m);
+	#endif
 	for (c = m->clients; c; c = c->next) {
+		#ifdef HIDEVACANTTAGS
+		occ |= c->tags == 255 ? 0 : c->tags;
+		#else
 		occ |= c->tags;
+		#endif
 		if (c->isurgent)
 			urg |= c->tags;
 	}
 	x = 0;
 	for (i = 0; i < LENGTH(tags); i++) {
+		#if defined(HIDEVACANTTAGS)
+		/* do not draw vacant tags */
+		if (!(occ & 1 << i || m->tagset[m->seltags] & 1 << i))
+		continue;
+		#endif
 		w = TEXTW(tags[i]);
+		#ifdef PERSONAL
+		drw_setscheme(drw, scheme[(m->tagset[m->seltags] & 1 << i) ? SchemeSel : (urg & 1 << i ? SchemeUrgent : SchemeNorm)]);
+		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], 0);
+		#else
 		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
 		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
-		if (occ & 1 << i)
-			drw_rect(drw, x + boxs, boxs, boxw, boxw,
-				m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
-				urg & 1 << i);
+		#endif
+		#if defined(PERSONAL) && ! defined(HIDEVACANTTAGS)   // Active TAG indicators
+		{
+			if (occ & 1 << i) {
+				drw_setscheme(drw, scheme[SchemeTagUnderline]);
+				drw_rect(drw, x + boxw + 4, 0, w - ( 2 * boxw) - 8, boxw - 2, 1, 0);
+				drw_rect(drw, x + boxw + 4, 19, w - ( 2 * boxw) - 8, boxw - 2, 1, 0);
+			}	
+		}
+		#elif defined(PERSONAL) && defined(HIDEVACANTTAGS)
+		// NOP
+		#elif defined(HIDEVACANTTAGS)
+		// NOP
+		#else
+			if (occ & 1 << i)
+				drw_rect(drw, x + boxs, boxs, boxw, boxw, m == selmon && selmon->sel && selmon->sel->tags & 1 << i, urg & 1 << i);
+		#endif
 		x += w;
 	}
+	#ifdef PERSONAL
+	w = blw = TEXTW(buttonbar);
+	drw_setscheme(drw, scheme[SchemeCmusButton]);
+	x = drw_text(drw, x, 0, w, bh, lrpad / 2, buttonbar, 0);
+	#else
 	w = blw = TEXTW(m->ltsymbol);
 	drw_setscheme(drw, scheme[SchemeNorm]);
 	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
+	#endif
 
+	#ifdef SYSTRAY
+	if ((w = m->ww - sw - stw - x) > bh) {
+	#else
 	if ((w = m->ww - sw - x) > bh) {
+	#endif
 		if (m->sel) {
+			#ifdef PERSONAL
+			drw_setscheme(drw, scheme[SchemeWnameBG]); // set Window name BG color as black
+			#else
 			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
+			#endif
+			#ifdef BARPADDING
+			drw_text(drw, x, 0, w - 2 * sp, bh, lrpad / 2, m->sel->name, 0);
+			#else
 			drw_text(drw, x, 0, w, bh, lrpad / 2, m->sel->name, 0);
+			#endif
 			if (m->sel->isfloating)
 				drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
 		} else {
 			drw_setscheme(drw, scheme[SchemeNorm]);
+			#ifdef BARPADDING
+			drw_rect(drw, x, 0, w - 2 * sp, bh, 1, 1);
+			#else
 			drw_rect(drw, x, 0, w, bh, 1, 1);
+			#endif
 		}
 	}
+	#ifdef SYSTRAY
+	drw_map(drw, m->barwin, 0, 0, m->ww - stw, bh);
+	#else
 	drw_map(drw, m->barwin, 0, 0, m->ww, bh);
+	#endif
 }
 
 void
@@ -776,8 +1135,16 @@
 	Monitor *m;
 	XExposeEvent *ev = &e->xexpose;
 
+	#ifdef SYSTRAY
+	if (ev->count == 0 && (m = wintomon(ev->window))) {
+ 		drawbar(m);
+		if (m == selmon)
+			updatesystray();
+	}
+	#else
 	if (ev->count == 0 && (m = wintomon(ev->window)))
 		drawbar(m);
+	#endif
 }
 
 void
@@ -862,10 +1229,25 @@
 	unsigned long dl;
 	unsigned char *p = NULL;
 	Atom da, atom = None;
-
+	#ifdef SYSTRAY
+	/* FIXME getatomprop should return the number of items and a pointer to
+	 * the stored data instead of this workaround */
+	Atom req = XA_ATOM;
+	if (prop == xatom[XembedInfo])
+		req = xatom[XembedInfo];
+	#endif
+
+	#ifdef SYSTRAY
+	if (XGetWindowProperty(dpy, c->win, prop, 0L, sizeof atom, False, req,
+	#else
 	if (XGetWindowProperty(dpy, c->win, prop, 0L, sizeof atom, False, XA_ATOM,
+	#endif
 		&da, &di, &dl, &dl, &p) == Success && p) {
 		atom = *(Atom *)p;
+		#ifdef SYSTRAY
+		if (da == xatom[XembedInfo] && dl == 2)
+			atom = ((Atom *)p)[1];
+		#endif
 		XFree(p);
 	}
 	return atom;
@@ -899,6 +1281,18 @@
 	return result;
 }
 
+#ifdef SYSTRAY
+unsigned int
+getsystraywidth()
+{
+	unsigned int w = 0;
+	Client *i;
+	if(showsystray)
+		for(i = systray->icons; i; w += i->w + systrayspacing, i = i->next) ;
+	return w ? w + systrayspacing : 1;
+}
+#endif
+
 int
 gettextprop(Window w, Atom atom, char *text, unsigned int size)
 {
@@ -966,7 +1360,11 @@
 void
 incnmaster(const Arg *arg)
 {
+	#ifdef PERTAG
+	selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag] = MAX(selmon->nmaster + arg->i, 0);
+	#else
 	selmon->nmaster = MAX(selmon->nmaster + arg->i, 0);
+	#endif
 	arrange(selmon);
 }
 
@@ -1003,7 +1401,11 @@
 {
 	if (!selmon->sel)
 		return;
+	#ifdef SYSTRAY
+	if (!sendevent(selmon->sel->win, wmatom[WMDelete], NoEventMask, wmatom[WMDelete], CurrentTime, 0 , 0, 0)) {
+	#else
 	if (!sendevent(selmon->sel, wmatom[WMDelete])) {
+	#endif
 		XGrabServer(dpy);
 		XSetErrorHandler(xerrordummy);
 		XSetCloseDownMode(dpy, DestroyAll);
@@ -1056,13 +1458,23 @@
 	updatewindowtype(c);
 	updatesizehints(c);
 	updatewmhints(c);
+	#ifdef CENTER
+	if (c->iscentered) {
+		c->x = c->mon->mx + (c->mon->mw - WIDTH(c)) / 2;
+		c->y = c->mon->my + (c->mon->mh - HEIGHT(c)) / 2;
+	}
+	#endif
 	XSelectInput(dpy, w, EnterWindowMask|FocusChangeMask|PropertyChangeMask|StructureNotifyMask);
 	grabbuttons(c, 0);
 	if (!c->isfloating)
 		c->isfloating = c->oldstate = trans != None || c->isfixed;
 	if (c->isfloating)
 		XRaiseWindow(dpy, c->win);
+	#ifdef ATTACHASIDE
+	attachaside(c);
+	#else
 	attach(c);
+	#endif
 	attachstack(c);
 	XChangeProperty(dpy, root, netatom[NetClientList], XA_WINDOW, 32, PropModeAppend,
 		(unsigned char *) &(c->win), 1);
@@ -1072,6 +1484,9 @@
 		unfocus(selmon->sel, 0);
 	c->mon->sel = c;
 	arrange(c->mon);
+	#ifdef ROUNDEDCORNERS
+	roundcorners(c, cornerradius);
+	#endif
 	XMapWindow(dpy, c->win);
 	focus(NULL);
 }
@@ -1091,6 +1506,14 @@
 {
 	static XWindowAttributes wa;
 	XMapRequestEvent *ev = &e->xmaprequest;
+	#ifdef SYSTRAY
+	Client *i;
+	if ((i = wintosystrayicon(ev->window))) {
+		sendevent(i->win, netatom[Xembed], StructureNotifyMask, CurrentTime, XEMBED_WINDOW_ACTIVATE, 0, systray->win, XEMBED_EMBEDDED_VERSION);
+		resizebarwin(selmon);
+		updatesystray();
+	}
+	#endif
 
 	if (!XGetWindowAttributes(dpy, ev->window, &wa))
 		return;
@@ -1192,6 +1615,18 @@
 	}
 }
 
+#ifdef ATTACHASIDE
+Client *
+nexttagged(Client *c) {
+	Client *walked = c->mon->clients;
+	for(;
+		walked && (walked->isfloating || !ISVISIBLEONTAG(walked, c->tags));
+		walked = walked->next
+	);
+	return walked;
+}
+#endif
+
 Client *
 nexttiled(Client *c)
 {
@@ -1215,6 +1650,19 @@
 	Window trans;
 	XPropertyEvent *ev = &e->xproperty;
 
+	#ifdef SYSTRAY
+	if ((c = wintosystrayicon(ev->window))) {
+		if (ev->atom == XA_WM_NORMAL_HINTS) {
+			updatesizehints(c);
+			updatesystrayicongeom(c, c->w, c->h);
+		}
+		else
+			updatesystrayiconstate(c, ev);
+		resizebarwin(selmon);
+		updatesystray();
+	}
+	#endif
+
 	if ((ev->window == root) && (ev->atom == XA_WM_NAME))
 		updatestatus();
 	else if (ev->state == PropertyDelete)
@@ -1248,6 +1696,9 @@
 void
 quit(const Arg *arg)
 {
+	#ifdef RESTARTSIG
+	if(arg->i) restart = 1;
+	#endif
 	running = 0;
 }
 
@@ -1265,6 +1716,46 @@
 	return r;
 }
 
+#ifdef SYSTRAY
+void
+removesystrayicon(Client *i)
+{
+	Client **ii;
+
+	if (!showsystray || !i)
+		return;
+	for (ii = &systray->icons; *ii && *ii != i; ii = &(*ii)->next);
+	if (ii)
+		*ii = i->next;
+	free(i);
+}
+
+void
+resizebarwin(Monitor *m) {
+	unsigned int w = m->ww;
+	if (showsystray && m == systraytomon(m))
+		w -= getsystraywidth();
+	#if defined(BARPADDING)
+	XMoveResizeWindow(dpy, m->barwin, m->wx + sp, m->by + vp, w - 2 * sp, bh);	
+	#else
+	XMoveResizeWindow(dpy, m->barwin, m->wx, m->by, w, bh);
+	#endif
+}
+
+void
+resizerequest(XEvent *e)
+{
+	XResizeRequestEvent *ev = &e->xresizerequest;
+	Client *i;
+
+	if ((i = wintosystrayicon(ev->window))) {
+		updatesystrayicongeom(i, ev->width, ev->height);
+		resizebarwin(selmon);
+		updatesystray();
+	}
+}
+#endif
+
 void
 resize(Client *c, int x, int y, int w, int h, int interact)
 {
@@ -1287,6 +1778,97 @@
 	XSync(dpy, False);
 }
 
+#ifdef ROUNDEDCORNERS
+void roundcorners(Client *ac, const unsigned int fs) {
+	xcb_connection_t *c;
+     	c = xcb_connect (NULL, NULL);
+	const xcb_query_extension_reply_t *shape_query;
+  	shape_query = xcb_get_extension_data(c, &xcb_shape_id);
+  	if (!shape_query->present) 
+		return; 
+	
+	int32_t rad, dia;
+        rad = fs;
+        rad += ac->bw; dia = rad*2-1;
+
+	if(ac->w < dia || ac->h < dia)
+    		return;
+
+     	int ow  = ac->w+2*ac->bw;
+     	int oh  = ac->h+2*ac->bw;
+
+     	xcb_pixmap_t bpid = xcb_generate_id(c);
+      	xcb_pixmap_t cpid = xcb_generate_id(c);
+
+        xcb_create_pixmap(c, 1, bpid, ac->win, ow, oh);
+        xcb_create_pixmap(c, 1, cpid, ac->win, ac->w, ac->h);
+
+        xcb_gcontext_t black = xcb_generate_id(c);
+        xcb_gcontext_t white = xcb_generate_id(c);
+
+        xcb_create_gc(c, black, bpid, XCB_GC_FOREGROUND, (uint32_t[]){0, 0});
+        xcb_create_gc(c, white, bpid, XCB_GC_FOREGROUND, (uint32_t[]){1, 0});
+
+        xcb_arc_t barcs[] = {
+            { -1,     -1,     dia, dia, 0, 360 << 6 },
+            { -1,     oh-dia, dia, dia, 0, 360 << 6 },
+            { ow-dia, -1,     dia, dia, 0, 360 << 6 },
+            { ow-dia, oh-dia, dia, dia, 0, 360 << 6 },
+        };
+        xcb_rectangle_t brects[] = {
+            { rad, 0, ow-dia, oh },
+            { 0, rad, ow, oh-dia },
+        };
+
+        rad -= ac->bw; dia = rad*2-1;
+
+        xcb_arc_t carcs[] = {
+            { -1,    -1,    dia, dia, 0, 360 << 6 },
+            { -1,    ac->h-dia, dia, dia, 0, 360 << 6 },
+            { ac->w-dia, -1,    dia, dia, 0, 360 << 6 },
+            { ac->w-dia, ac->h-dia, dia, dia, 0, 360 << 6 },
+        };
+        xcb_rectangle_t crects[] = {
+            { rad, 0, ac->w-dia, ac->h },
+            { 0, rad, ac->w, ac->h-dia },
+        };
+
+        xcb_rectangle_t bounding = {0, 0, ow, oh};
+        xcb_poly_fill_rectangle(c, bpid, black, 1, &bounding);
+        xcb_poly_fill_rectangle(c, bpid, white, 2, brects);
+        xcb_poly_fill_arc(c, bpid, white, 4, barcs);
+
+        xcb_rectangle_t clipping = {0, 0, ac->w, ac->h};
+        xcb_poly_fill_rectangle(c, cpid, black, 1, &clipping);
+        xcb_poly_fill_rectangle(c, cpid, white, 2, crects);
+        xcb_poly_fill_arc(c, cpid, white, 4, carcs);
+
+        xcb_shape_mask(c, XCB_SHAPE_SO_SET, XCB_SHAPE_SK_BOUNDING, ac->win, -ac->bw, -ac->bw, bpid);
+        xcb_shape_mask(c, XCB_SHAPE_SO_SET, XCB_SHAPE_SK_CLIP, ac->win, 0, 0, cpid);
+
+	xcb_get_geometry_reply_t *geo = xcb_get_geometry_reply(c, xcb_get_geometry(c, ac->win), NULL);
+	if (geo == NULL)
+	{
+		free(geo);
+		xcb_free_pixmap(c, bpid);
+        	xcb_free_pixmap(c, cpid);
+		xcb_free_gc(c, bpid);
+		xcb_free_gc(c, cpid);
+		xcb_disconnect (c);
+		return;
+	}
+	
+	xcb_shape_mask(c, XCB_SHAPE_SO_SET, XCB_SHAPE_SK_BOUNDING, ac->win, ac->x-geo->x, ac->y-geo->y, bpid);
+        
+	free(geo);
+        xcb_free_pixmap(c, bpid);
+        xcb_free_pixmap(c, cpid);
+	xcb_free_gc(c, bpid);
+	xcb_free_gc(c, cpid);
+	xcb_disconnect (c);
+}
+#endif
+
 void
 resizemouse(const Arg *arg)
 {
@@ -1331,6 +1913,9 @@
 			}
 			if (!selmon->lt[selmon->sellt]->arrange || c->isfloating)
 				resize(c, c->x, c->y, nw, nh, 1);
+			#ifdef ROUNDEDCORNERS
+			roundcorners(c, cornerradius);
+			#endif
 			break;
 		}
 	} while (ev.type != ButtonRelease);
@@ -1342,6 +1927,9 @@
 		selmon = m;
 		focus(NULL);
 	}
+	#ifdef ROUNDEDCORNERS
+	roundcorners(c, cornerradius);
+	#endif
 }
 
 void
@@ -1417,7 +2005,11 @@
 	detachstack(c);
 	c->mon = m;
 	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
+	#ifdef ATTACHASIDE
+	attachaside(c);
+	#else
 	attach(c);
+	#endif
 	attachstack(c);
 	focus(NULL);
 	arrange(NULL);
@@ -1433,26 +2025,62 @@
 }
 
 int
+#ifdef SYSTRAY
+sendevent(Window w, Atom proto, int mask, long d0, long d1, long d2, long d3, long d4)
+#else
 sendevent(Client *c, Atom proto)
+#endif
 {
 	int n;
+	#ifdef SYSTRAY
+	Atom *protocols, mt;
+	#else
 	Atom *protocols;
+	#endif
 	int exists = 0;
 	XEvent ev;
 
+	#ifdef SYSTRAY
+	if (proto == wmatom[WMTakeFocus] || proto == wmatom[WMDelete]) {
+		mt = wmatom[WMProtocols];
+		if (XGetWMProtocols(dpy, w, &protocols, &n)) {
+			while (!exists && n--)
+				exists = protocols[n] == proto;
+			XFree(protocols);
+		}
+	}
+	else {
+		exists = True;
+		mt = proto;
+	#else
 	if (XGetWMProtocols(dpy, c->win, &protocols, &n)) {
 		while (!exists && n--)
 			exists = protocols[n] == proto;
 		XFree(protocols);
+	#endif	
 	}
 	if (exists) {
 		ev.type = ClientMessage;
+		#ifdef SYSTRAY
+		ev.xclient.window = w;
+		ev.xclient.message_type = mt;
+		#else
 		ev.xclient.window = c->win;
 		ev.xclient.message_type = wmatom[WMProtocols];
+		#endif
 		ev.xclient.format = 32;
+		#ifdef SYSTRAY
+		ev.xclient.data.l[0] = d0;
+		ev.xclient.data.l[1] = d1;
+		ev.xclient.data.l[2] = d2;
+		ev.xclient.data.l[3] = d3;
+		ev.xclient.data.l[4] = d4;
+		XSendEvent(dpy, w, False, mask, &ev);
+		#else
 		ev.xclient.data.l[0] = proto;
 		ev.xclient.data.l[1] = CurrentTime;
 		XSendEvent(dpy, c->win, False, NoEventMask, &ev);
+		#endif
 	}
 	return exists;
 }
@@ -1466,7 +2094,11 @@
 			XA_WINDOW, 32, PropModeReplace,
 			(unsigned char *) &(c->win), 1);
 	}
+	#ifdef SYSTRAY
+	sendevent(c->win, wmatom[WMTakeFocus], NoEventMask, wmatom[WMTakeFocus], CurrentTime, 0, 0, 0);
+	#else
 	sendevent(c, wmatom[WMTakeFocus]);
+	#endif
 }
 
 void
@@ -1481,6 +2113,9 @@
 		c->bw = 0;
 		c->isfloating = 1;
 		resizeclient(c, c->mon->mx, c->mon->my, c->mon->mw, c->mon->mh);
+		#ifdef ROUNDEDCORNERS
+		roundcorners(c, 0);
+		#endif
 		XRaiseWindow(dpy, c->win);
 	} else if (!fullscreen && c->isfullscreen){
 		XChangeProperty(dpy, c->win, netatom[NetWMState], XA_ATOM, 32,
@@ -1493,18 +2128,136 @@
 		c->w = c->oldw;
 		c->h = c->oldh;
 		resizeclient(c, c->x, c->y, c->w, c->h);
+		#ifdef ROUNDEDCORNERS
+		roundcorners(c, cornerradius);
+		#endif
 		arrange(c->mon);
 	}
 }
 
+#ifdef VANITYGAPS
+void
+setgaps(int oh, int ov, int ih, int iv)
+{
+	if (oh < 0) oh = 0;
+	if (ov < 0) ov = 0;
+	if (ih < 0) ih = 0;
+	if (iv < 0) iv = 0;
+
+	selmon->gappoh = oh;
+	selmon->gappov = ov;
+	selmon->gappih = ih;
+	selmon->gappiv = iv;
+	arrange(selmon);
+}
+
+void
+togglegaps(const Arg *arg)
+{
+	enablegaps = !enablegaps;
+	arrange(selmon);
+}
+
+void
+defaultgaps(const Arg *arg)
+{
+	setgaps(gappoh, gappov, gappih, gappiv);
+}
+
+void
+incrgaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh + arg->i,
+		selmon->gappov + arg->i,
+		selmon->gappih + arg->i,
+		selmon->gappiv + arg->i
+	);
+}
+
+void
+incrigaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh,
+		selmon->gappov,
+		selmon->gappih + arg->i,
+		selmon->gappiv + arg->i
+	);
+}
+
+void
+incrogaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh + arg->i,
+		selmon->gappov + arg->i,
+		selmon->gappih,
+		selmon->gappiv
+	);
+}
+
+void
+incrohgaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh + arg->i,
+		selmon->gappov,
+		selmon->gappih,
+		selmon->gappiv
+	);
+}
+
+void
+incrovgaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh,
+		selmon->gappov + arg->i,
+		selmon->gappih,
+		selmon->gappiv
+	);
+}
+
+void
+incrihgaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh,
+		selmon->gappov,
+		selmon->gappih + arg->i,
+		selmon->gappiv
+	);
+}
+
+void
+incrivgaps(const Arg *arg)
+{
+	setgaps(
+		selmon->gappoh,
+		selmon->gappov,
+		selmon->gappih,
+		selmon->gappiv + arg->i
+	);
+}
+#endif
+
 void
 setlayout(const Arg *arg)
 {
 	if (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt])
+		#ifdef PERTAG
+		selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag] ^= 1;
+		#else
 		selmon->sellt ^= 1;
+		#endif
 	if (arg && arg->v)
+		#ifdef PERTAG
+		selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt] = (Layout *)arg->v;
+		#else
 		selmon->lt[selmon->sellt] = (Layout *)arg->v;
-	strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof selmon->ltsymbol);
+		#endif
+	strncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, sizeof(selmon->ltsymbol) - 1);
 	if (selmon->sel)
 		arrange(selmon);
 	else
@@ -1522,7 +2275,11 @@
 	f = arg->f < 1.0 ? arg->f + selmon->mfact : arg->f - 1.0;
 	if (f < 0.1 || f > 0.9)
 		return;
+	#ifdef PERTAG
+	selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag] = f;
+	#else
 	selmon->mfact = f;
+	#endif
 	arrange(selmon);
 }
 
@@ -1536,6 +2293,11 @@
 	/* clean up any zombies immediately */
 	sigchld(0);
 
+	#ifdef RESTARTSIG
+	signal(SIGHUP, sighup);
+	signal(SIGTERM, sigterm);
+	#endif
+
 	/* init screen */
 	screen = DefaultScreen(dpy);
 	sw = DisplayWidth(dpy, screen);
@@ -1547,6 +2309,10 @@
 	lrpad = drw->fonts->h;
 	bh = drw->fonts->h + 2;
 	updategeom();
+	#ifdef BARPADDING
+	sp = sidepad;
+	vp = (topbar == 1) ? vertpad : - vertpad;
+	#endif
 	/* init atoms */
 	utf8string = XInternAtom(dpy, "UTF8_STRING", False);
 	wmatom[WMProtocols] = XInternAtom(dpy, "WM_PROTOCOLS", False);
@@ -1555,6 +2321,15 @@
 	wmatom[WMTakeFocus] = XInternAtom(dpy, "WM_TAKE_FOCUS", False);
 	netatom[NetActiveWindow] = XInternAtom(dpy, "_NET_ACTIVE_WINDOW", False);
 	netatom[NetSupported] = XInternAtom(dpy, "_NET_SUPPORTED", False);
+	#ifdef SYSTRAY
+	netatom[NetSystemTray] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_S0", False);
+	netatom[NetSystemTrayOP] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_OPCODE", False);
+	netatom[NetSystemTrayOrientation] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_ORIENTATION", False);
+	netatom[NetSystemTrayOrientationHorz] = XInternAtom(dpy, "_NET_SYSTEM_TRAY_ORIENTATION_HORZ", False);
+	xatom[Manager] = XInternAtom(dpy, "MANAGER", False);
+	xatom[Xembed] = XInternAtom(dpy, "_XEMBED", False);
+	xatom[XembedInfo] = XInternAtom(dpy, "_XEMBED_INFO", False);
+	#endif
 	netatom[NetWMName] = XInternAtom(dpy, "_NET_WM_NAME", False);
 	netatom[NetWMState] = XInternAtom(dpy, "_NET_WM_STATE", False);
 	netatom[NetWMCheck] = XInternAtom(dpy, "_NET_SUPPORTING_WM_CHECK", False);
@@ -1570,9 +2345,16 @@
 	scheme = ecalloc(LENGTH(colors), sizeof(Clr *));
 	for (i = 0; i < LENGTH(colors); i++)
 		scheme[i] = drw_scm_create(drw, colors[i], 3);
+	#ifdef SYSTRAY
+	/* init system tray */
+	updatesystray();
+	#endif
 	/* init bars */
 	updatebars();
 	updatestatus();
+	#ifdef BARPADDING
+	updatebarpos(selmon);
+	#endif
 	/* supporting window for NetWMCheck */
 	wmcheckwin = XCreateSimpleWindow(dpy, root, 0, 0, 1, 1, 0, 0, 0);
 	XChangeProperty(dpy, wmcheckwin, netatom[NetWMCheck], XA_WINDOW, 32,
@@ -1636,6 +2418,22 @@
 	while (0 < waitpid(-1, NULL, WNOHANG));
 }
 
+#ifdef RESTARTSIG
+void
+sighup(int unused)
+{
+	Arg a = {.i = 1};
+	quit(&a);
+}
+
+void
+sigterm(int unused)
+{
+	Arg a = {.i = 0};
+	quit(&a);
+}
+#endif
+
 void
 spawn(const Arg *arg)
 {
@@ -1673,38 +2471,111 @@
 void
 tile(Monitor *m)
 {
+	#ifdef VANITYGAPS
+	unsigned int i, n, h, r, oe = enablegaps, ie = enablegaps, mw, my, ty;
+	#else
 	unsigned int i, n, h, mw, my, ty;
+	#endif
 	Client *c;
 
 	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
 	if (n == 0)
 		return;
 
+	#ifdef VANITYGAPS
+	if (smartgaps == n) {
+		oe = 0; // outer gaps disabled
+	}
+	#endif
+
 	if (n > m->nmaster)
+		#ifdef VANITYGAPS
+		mw = m->nmaster ? (m->ww + m->gappiv*ie) * m->mfact : 0;
+		#else
 		mw = m->nmaster ? m->ww * m->mfact : 0;
+		#endif
 	else
+		#ifdef VANITYGAPS
+		mw = m->ww - 2*m->gappov*oe + m->gappiv*ie;
+	for (i = 0, my = ty = m->gappoh*oe, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+		#else
 		mw = m->ww;
 	for (i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+		#endif
 		if (i < m->nmaster) {
+			#ifdef VANITYGAPS
+			r = MIN(n, m->nmaster) - i;
+			h = (m->wh - my - m->gappoh*oe - m->gappih*ie * (r - 1)) / r;
+			resize(c, m->wx + m->gappov*oe, m->wy + my, mw - (2*c->bw) - m->gappiv*ie, h - (2*c->bw), 0);
+			my += HEIGHT(c) + m->gappih*ie;
+			#else
 			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
 			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), 0);
 			my += HEIGHT(c);
+			#endif
+			#ifdef ROUNDEDCORNERS
+			roundcorners(c, cornerradius);
+			#endif
 		} else {
+			#ifdef VANITYGAPS
+			r = n - i;
+			h = (m->wh - ty - m->gappoh*oe - m->gappih*ie * (r - 1)) / r;
+			resize(c, m->wx + mw + m->gappov*oe, m->wy + ty, m->ww - mw - (2*c->bw) - 2*m->gappov*oe, h - (2*c->bw), 0);
+			ty += HEIGHT(c) + m->gappih*ie;
+			#else
 			h = (m->wh - ty) / (n - i);
 			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), 0);
 			ty += HEIGHT(c);
+			#endif
+			#ifdef ROUNDEDCORNERS
+			roundcorners(c, cornerradius);
+			#endif
 		}
 }
 
 void
 togglebar(const Arg *arg)
 {
+	#ifdef PERTAG
+	selmon->showbar = selmon->pertag->showbars[selmon->pertag->curtag] = !selmon->showbar;
+	#else
 	selmon->showbar = !selmon->showbar;
+	#endif
 	updatebarpos(selmon);
+	#ifdef SYSTRAY
+	resizebarwin(selmon);
+	if (showsystray) {
+		XWindowChanges wc;
+		if (!selmon->showbar)
+			wc.y = -bh;
+		else if (selmon->showbar) {
+			wc.y = 0;
+			if (!selmon->topbar)
+				wc.y = selmon->mh - bh;
+		}
+		XConfigureWindow(dpy, systray->win, CWY, &wc);
+	}
+	#elif defined(BARPADDING) && ! defined(SYSTRAY)
+	XMoveResizeWindow(dpy, selmon->barwin, selmon->wx + sp, selmon->by + vp, selmon->ww - 2 * sp, bh);
+	#else
 	XMoveResizeWindow(dpy, selmon->barwin, selmon->wx, selmon->by, selmon->ww, bh);
+	#endif
 	arrange(selmon);
 }
 
+#ifdef PERSONAL
+void
+fullscreenmode(const Arg *arg)
+{
+	if (!selmon->sel)
+		return;
+	if (!selmon->sel->isfullscreen)
+		setfullscreen(selmon->sel, 1);
+	else if (selmon->sel->isfullscreen)
+		setfullscreen(selmon->sel, 0);	
+}
+#endif
+
 void
 togglefloating(const Arg *arg)
 {
@@ -1738,9 +2609,35 @@
 toggleview(const Arg *arg)
 {
 	unsigned int newtagset = selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK);
+	#ifdef PERTAG
+	int i;
+	#endif
 
 	if (newtagset) {
 		selmon->tagset[selmon->seltags] = newtagset;
+		#ifdef PERTAG
+		if (newtagset == ~0) {
+			selmon->pertag->prevtag = selmon->pertag->curtag;
+			selmon->pertag->curtag = 0;
+		}
+
+		/* test if the user did not select the same tag */
+		if (!(newtagset & 1 << (selmon->pertag->curtag - 1))) {
+			selmon->pertag->prevtag = selmon->pertag->curtag;
+			for (i = 0; !(newtagset & 1 << i); i++) ;
+			selmon->pertag->curtag = i + 1;
+		}
+
+		/* apply settings for this view */
+		selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+		selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+		selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+		selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+		selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+
+		if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+			togglebar(NULL);
+		#endif
 		focus(NULL);
 		arrange(selmon);
 	}
@@ -1796,11 +2693,22 @@
 		else
 			unmanage(c, 0);
 	}
+	#ifdef SYSTRAY
+	else if ((c = wintosystrayicon(ev->window))) {
+		/* KLUDGE! sometimes icons occasionally unmap their windows, but do
+		 * _not_ destroy them. We map those windows back */
+		XMapRaised(dpy, c->win);
+		updatesystray();
+	}
+	#endif
 }
 
 void
 updatebars(void)
 {
+	#ifdef SYSTRAY
+	unsigned int w;
+	#endif
 	Monitor *m;
 	XSetWindowAttributes wa = {
 		.override_redirect = True,
@@ -1811,10 +2719,27 @@
 	for (m = mons; m; m = m->next) {
 		if (m->barwin)
 			continue;
+		#if defined(SYSTRAY)	
+		w = m->ww;
+		if (showsystray && m == systraytomon(m))
+			w -= getsystraywidth();
+		#endif	
+		#if defined(BARPADDING) && defined(SYSTRAY)
+		m->barwin = XCreateWindow(dpy, root, m->wx + sp, m->by + vp, m->ww - 2 * sp, bh, 0, DefaultDepth(dpy, screen),
+		#elif defined(SYSTRAY)
+		m->barwin = XCreateWindow(dpy, root, m->wx, m->by, w, bh, 0, DefaultDepth(dpy, screen),
+		#elif defined(BARPADDING)
+		m->barwin = XCreateWindow(dpy, root, m->wx + sp, m->by + vp, m->ww - 2 * sp, bh, 0, DefaultDepth(dpy, screen),
+		#else
 		m->barwin = XCreateWindow(dpy, root, m->wx, m->by, m->ww, bh, 0, DefaultDepth(dpy, screen),
+		#endif
 				CopyFromParent, DefaultVisual(dpy, screen),
 				CWOverrideRedirect|CWBackPixmap|CWEventMask, &wa);
 		XDefineCursor(dpy, m->barwin, cursor[CurNormal]->cursor);
+		#ifdef SYSTRAY
+		if (showsystray && m == systraytomon(m))
+			XMapRaised(dpy, systray->win);
+		#endif
 		XMapRaised(dpy, m->barwin);
 		XSetClassHint(dpy, m->barwin, &ch);
 	}
@@ -1826,11 +2751,21 @@
 	m->wy = m->my;
 	m->wh = m->mh;
 	if (m->showbar) {
+		#ifdef BARPADDING
+		m->wh = m->wh - vertpad - bh;
+		m->by = m->topbar ? m->wy : m->wy + m->wh + vertpad;
+		m->wy = m->topbar ? m->wy + bh + vp : m->wy;
+		#else
 		m->wh -= bh;
 		m->by = m->topbar ? m->wy : m->wy + m->wh;
 		m->wy = m->topbar ? m->wy + bh : m->wy;
+		#endif
 	} else
+		#ifdef BARPADDING
+		m->by = -bh - vp;
+		#else
 		m->by = -bh;
+		#endif
 }
 
 void
@@ -1897,7 +2832,11 @@
 					m->clients = c->next;
 					detachstack(c);
 					c->mon = mons;
+					#ifdef ATTACHASIDE
+					attachaside(c);
+					#else
 					attach(c);
+					#endif
 					attachstack(c);
 				}
 				if (m == selmon)
@@ -1990,9 +2929,163 @@
 	if (!gettextprop(root, XA_WM_NAME, stext, sizeof(stext)))
 		strcpy(stext, "dwm-"VERSION);
 	drawbar(selmon);
+	#ifdef SYSTRAY
+	updatesystray();
+	#endif
+}
+
+#ifdef SYSTRAY
+void
+updatesystrayicongeom(Client *i, int w, int h)
+{
+	if (i) {
+		i->h = bh;
+		if (w == h)
+			i->w = bh;
+		else if (h == bh)
+			i->w = w;
+		else
+			i->w = (int) ((float)bh * ((float)w / (float)h));
+		applysizehints(i, &(i->x), &(i->y), &(i->w), &(i->h), False);
+		/* force icons into the systray dimenons if they don't want to */
+		if (i->h > bh) {
+			if (i->w == i->h)
+				i->w = bh;
+			else
+				i->w = (int) ((float)bh * ((float)i->w / (float)i->h));
+			i->h = bh;
+		}
+	}
 }
 
 void
+updatesystrayiconstate(Client *i, XPropertyEvent *ev)
+{
+	long flags;
+	int code = 0;
+
+	if (!showsystray || !i || ev->atom != xatom[XembedInfo] ||
+			!(flags = getatomprop(i, xatom[XembedInfo])))
+		return;
+
+	if (flags & XEMBED_MAPPED && !i->tags) {
+		i->tags = 1;
+		code = XEMBED_WINDOW_ACTIVATE;
+		XMapRaised(dpy, i->win);
+		setclientstate(i, NormalState);
+	}
+	else if (!(flags & XEMBED_MAPPED) && i->tags) {
+		i->tags = 0;
+		code = XEMBED_WINDOW_DEACTIVATE;
+		XUnmapWindow(dpy, i->win);
+		setclientstate(i, WithdrawnState);
+	}
+	else
+		return;
+	sendevent(i->win, xatom[Xembed], StructureNotifyMask, CurrentTime, code, 0,
+			systray->win, XEMBED_EMBEDDED_VERSION);
+}
+
+void
+updatesystray(void)
+{
+	XSetWindowAttributes wa;
+	XWindowChanges wc;
+	Client *i;
+	Monitor *m = systraytomon(NULL);
+	unsigned int x = m->mx + m->mw;
+	unsigned int w = 1;
+
+	if (!showsystray)
+		return;
+	if (!systray) {
+		/* init systray */
+		if (!(systray = (Systray *)calloc(1, sizeof(Systray))))
+			die("fatal: could not malloc() %u bytes\n", sizeof(Systray));
+		#ifdef BARPADDING	
+		systray->win = XCreateSimpleWindow(dpy, root, x - sp, m->by + vp, w, bh, 0, 0, scheme[SchemeSel][ColBg].pixel);	
+		#else
+		systray->win = XCreateSimpleWindow(dpy, root, x, m->by, w, bh, 0, 0, scheme[SchemeSel][ColBg].pixel);
+		#endif
+		wa.event_mask        = ButtonPressMask | ExposureMask;
+		wa.override_redirect = True;
+		wa.background_pixel  = scheme[SchemeNorm][ColBg].pixel;
+		XSelectInput(dpy, systray->win, SubstructureNotifyMask);
+		XChangeProperty(dpy, systray->win, netatom[NetSystemTrayOrientation], XA_CARDINAL, 32,
+				PropModeReplace, (unsigned char *)&netatom[NetSystemTrayOrientationHorz], 1);
+		XChangeWindowAttributes(dpy, systray->win, CWEventMask|CWOverrideRedirect|CWBackPixel, &wa);
+		XMapRaised(dpy, systray->win);
+		XSetSelectionOwner(dpy, netatom[NetSystemTray], systray->win, CurrentTime);
+		if (XGetSelectionOwner(dpy, netatom[NetSystemTray]) == systray->win) {
+			sendevent(root, xatom[Manager], StructureNotifyMask, CurrentTime, netatom[NetSystemTray], systray->win, 0, 0);
+			XSync(dpy, False);
+		}
+		else {
+			fprintf(stderr, "dwm: unable to obtain system tray.\n");
+			free(systray);
+			systray = NULL;
+			return;
+		}
+	}
+	for (w = 0, i = systray->icons; i; i = i->next) {
+		/* make sure the background color stays the same */
+		wa.background_pixel  = scheme[SchemeNorm][ColBg].pixel;
+		XChangeWindowAttributes(dpy, i->win, CWBackPixel, &wa);
+		XMapRaised(dpy, i->win);
+		w += systrayspacing;
+		i->x = w;
+		XMoveResizeWindow(dpy, i->win, i->x, 0, i->w, i->h);
+		w += i->w;
+		if (i->mon != m)
+			i->mon = m;
+	}
+	w = w ? w + systrayspacing : 1;
+	x -= w;
+	#ifdef BARPADDING
+	XMoveResizeWindow(dpy, systray->win, x - sp, m->by + vp, w, bh);
+	wc.x = x - sp; wc.y = m->by + vp; wc.width = w; wc.height = bh;
+	#else
+	XMoveResizeWindow(dpy, systray->win, x, m->by, w, bh);
+	wc.x = x; wc.y = m->by; wc.width = w; wc.height = bh;
+	#endif
+	wc.stack_mode = Above; wc.sibling = m->barwin;
+	XConfigureWindow(dpy, systray->win, CWX|CWY|CWWidth|CWHeight|CWSibling|CWStackMode, &wc);
+	XMapWindow(dpy, systray->win);
+	XMapSubwindows(dpy, systray->win);
+	/* redraw background */
+	XSetForeground(dpy, drw->gc, scheme[SchemeNorm][ColBg].pixel);
+	XFillRectangle(dpy, systray->win, drw->gc, 0, 0, w, bh);
+	XSync(dpy, False);
+}
+
+Client *
+wintosystrayicon(Window w) {
+	Client *i = NULL;
+
+	if (!showsystray || !w)
+		return i;
+	for (i = systray->icons; i && i->win != w; i = i->next) ;
+	return i;
+}
+
+Monitor *
+systraytomon(Monitor *m) {
+	Monitor *t;
+	int i, n;
+	if(!systraypinning) {
+		if(!m)
+			return selmon;
+		return m == selmon ? m : NULL;
+	}
+	for(n = 1, t = mons; t && t->next; n++, t = t->next) ;
+	for(i = 1, t = mons; t && t->next && i < systraypinning; i++, t = t->next) ;
+	if(systraypinningfailfirst && n < systraypinning)
+		return mons;
+	return t;
+}
+#endif
+
+void
 updatetitle(Client *c)
 {
 	if (!gettextprop(c->win, netatom[NetWMName], c->name, sizeof c->name))
@@ -2009,8 +3102,16 @@
 
 	if (state == netatom[NetWMFullscreen])
 		setfullscreen(c, 1);
+	#ifdef CENTER
+	if (wtype == netatom[NetWMWindowTypeDialog]) {
+		c->iscentered = 1;
+	#else
 	if (wtype == netatom[NetWMWindowTypeDialog])
+	#endif
 		c->isfloating = 1;
+	#ifdef CENTER
+	}
+	#endif
 }
 
 void
@@ -2035,11 +3136,44 @@
 void
 view(const Arg *arg)
 {
+	#ifdef PERTAG
+	int i;
+	unsigned int tmptag;
+	#endif
+
 	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 		return;
 	selmon->seltags ^= 1; /* toggle sel tagset */
+	#ifdef PERTAG
+	if (arg->ui & TAGMASK) {
+	#else
 	if (arg->ui & TAGMASK)
+	#endif
 		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
+		#ifdef PERTAG
+		selmon->pertag->prevtag = selmon->pertag->curtag;
+
+		if (arg->ui == ~0)
+			selmon->pertag->curtag = 0;
+		else {
+			for (i = 0; !(arg->ui & 1 << i); i++) ;
+			selmon->pertag->curtag = i + 1;
+		}
+	} else {
+		tmptag = selmon->pertag->prevtag;
+		selmon->pertag->prevtag = selmon->pertag->curtag;
+		selmon->pertag->curtag = tmptag;
+	}
+
+	selmon->nmaster = selmon->pertag->nmasters[selmon->pertag->curtag];
+	selmon->mfact = selmon->pertag->mfacts[selmon->pertag->curtag];
+	selmon->sellt = selmon->pertag->sellts[selmon->pertag->curtag];
+	selmon->lt[selmon->sellt] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt];
+	selmon->lt[selmon->sellt^1] = selmon->pertag->ltidxs[selmon->pertag->curtag][selmon->sellt^1];
+
+	if (selmon->showbar != selmon->pertag->showbars[selmon->pertag->curtag])
+		togglebar(NULL);
+		#endif
 	focus(NULL);
 	arrange(selmon);
 }
@@ -2143,6 +3277,9 @@
 #endif /* __OpenBSD__ */
 	scan();
 	run();
+	#ifdef RESTARTSIG
+	if(restart) execvp(argv[0], argv);
+	#endif
 	cleanup();
 	XCloseDisplay(dpy);
 	return EXIT_SUCCESS;
